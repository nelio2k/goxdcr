# Copyright 2024-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
declare -a cluster1BucketsArr
cluster1BucketsArr=("B1" "B3")
declare -a cluster2BucketsArr
cluster2BucketsArr=("B2" "B4")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]=${cluster2BucketsArr[@]})

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B1" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty # conflict bucket for C1.B1
insertPropertyIntoBucketNamePropertyMap "B3" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B4" BucketProperty # conflict bucket for C2.B2

conflictLoggingMap1="{\"bucket\":\"B3\", \"collection\": \"_default._default\", \"loggingRules\": {\"S1.col1\": {\"bucket\":\"B3\", \"collection\": \"S1.col1\"}}}"
declare -A BucketReplProperties1=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["filterBinary"]=true ["conflictLogging"]=$conflictLoggingMap1)

conflictLoggingMap2="{\"bucket\":\"B4\", \"collection\": \"_default._default\", \"loggingRules\": {\"S1.col1\": {\"bucket\":\"B4\", \"collection\": \"S1.col1\"}}}"
declare -A BucketReplProperties2=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["filterBinary"]=true ["conflictLogging"]=$conflictLoggingMap1)

# Each bucket with S1.col1 and S1.col1 -> S1.col2 will be the special loggingRule
# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]=${scope1Arr[@]} ["B3"]=${scope1Arr[@]} ["B4"]=${scope1Arr[@]})

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]})

function waitForChangesLeft0ForTopology {
	waitForChangesLeft0 "C1" "B1" "C2" "B2"
	waitForChangesLeft0 "C2" "B2" "C1" "B1"
}

function verifyPromStats {
	# verify no data-corruption
	validateBinaryFilteredIs0 "C1" "B1" "B2"
	validateBinaryFilteredIs0 "C2" "B2" "B1"

	# verify no datapool get failures
	validateDatapoolFailIs0 "C1" "B1" "B2"
	validateDatapoolFailIs0 "C2" "B2" "B1"
}

function testReplicationWithConflictLogging {
	echo "Setting enableCrossClusterVersioning to true"
	setCrossClusterVersioningForBucket "C1" "B1"
	setCrossClusterVersioningForBucket "C2" "B2"

	echo "Replication C1.B1 -> C2.B2"
	createBucketReplication "C1" "B1" "C2" "B2" BucketReplProperties1
	echo "Replication C2.B2 -> C1.B1"
	createBucketReplication "C2" "B2" "C1" "B1" BucketReplProperties2

	# Insert
	writeJSONDocument "C1" "B1" "doc1" '{"foo":"bar"}'
	writeJSONDocument "C1" "B1" "doc2" '{"foo":"bar"}'
	waitForChangesLeft0ForTopology

	# Update at C1.B1
	writeJSONDocument "C1" "B1" "doc1" '{"foo2":"bar2"}'
	writeJSONDocument "C1" "B1" "doc2" '{"foo2":"bar2"}'
	waitForChangesLeft0ForTopology
	# Update at C2.B2
	writeJSONDocument "C2" "B2" "doc1" '{"foo3":"bar3"}'
	writeJSONDocument "C2" "B2" "doc2" '{"foo3":"bar3"}'
	waitForChangesLeft0ForTopology
	grepForAbnormalities

	numItems=10000
	CBWORKLOAD_COLLECTION_NUM_ITEMS=$numItems

	echo runCbWorkloadGenBucket _default._default "C1" "B1"
	runCbWorkloadGenBucket "C1" "B1" &
	echo runCbWorkloadGenBucket _default._default "C1" "B1" $numItems "common"
	runCbWorkloadGenBucket "C1" "B1" $numItems "common" &

	echo runCbWorkloadGenCollection "C1" "B1" "S1" "col1"
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1" &
	echo runCbWorkloadGenCollection "C1" "B1" "S1" "col1" "common"
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1" "common" &


	echo runCbWorkloadGenBucket _default._default "C2" "B2"
	runCbWorkloadGenBucket "C2" "B2" &
	echo runCbWorkloadGenBucket _default._default "C2" "B2" $numItems "common"
	runCbWorkloadGenBucket "C2" "B2" $numItems "common" &

	echo runCbWorkloadGenCollection "C2" "B2" "S1" "col1"
	runCbWorkloadGenCollection "C2" "B2" "S1" "col1" &
	echo runCbWorkloadGenCollection "C2" "B2" "S1" "col1" "common"
	runCbWorkloadGenCollection "C2" "B2" "S1" "col1" "common" &

	echo "sleeping 10 seconds for cbworkloadgen to finish"
	sleep 10

	sleepTime=10
	echo "Sleep $sleepTime seconds to wait for replication to finish"
	sleep $sleepTime

	waitForChangesLeft0ForTopology

	grepForAbnormalities

	verifyPromStats

	# TODO - check if conflict count in the conflict buckets is non-zero
}

function runTestCase {
	echo "============================================================================"
	echo "Running conflict logging test case"
	echo "============================================================================"
	testForClusterRun
	if (($? != 0)); then
		exit $?
	fi
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi

	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"

	sleep 2
	testReplicationWithConflictLogging

	echo "============================================================================"
	echo "Running conflict logging test case passed"
	echo "============================================================================"
	cleanupBucketReplications
    cleanupBuckets
	cleanupRemoteClusterRefs
}
